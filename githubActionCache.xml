<application>
  <component name="GitHubActionCache">
    <option name="actions">
      <map>
        <entry key="actions/cache@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="enableCrossOsArchive" value="r[false] def[false] An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms" />
                  <entry key="fail-on-cache-miss" value="r[false] def[false] Fail the workflow if cache entry is not found" />
                  <entry key="key" value="r[true] An explicit key for restoring and saving the cache" />
                  <entry key="lookup-only" value="r[false] def[false] Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache" />
                  <entry key="path" value="r[true] A list of files, directories, and wildcard patterns to cache and restore" />
                  <entry key="restore-keys" value="r[false] An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case." />
                  <entry key="upload-chunk-size" value="r[false] The chunk size used to split up large files during upload, in bytes" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/cache/v3/action.yml" />
                  <entry key="expiryTime" value="1716765816105" />
                  <entry key="githubUrl" value="https://github.com/actions/cache/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/cache" />
                  <entry key="usesValue" value="actions/cache@v3" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate an exact match was found for the primary key" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/checkout@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="clean" value="r[false] def[true] Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching" />
                  <entry key="fetch-depth" value="r[false] def[1] Number of commits to fetch. 0 indicates all history for all branches and tags." />
                  <entry key="lfs" value="r[false] def[false] Whether to download Git-LFS files" />
                  <entry key="path" value="r[false] Relative path under $GITHUB_WORKSPACE to place the repository" />
                  <entry key="persist-credentials" value="r[false] def[true] Whether to configure the token or SSH key with the local git config" />
                  <entry key="ref" value="r[false]" />
                  <entry key="repository" value="r[false] def[${{ github.repository }}] Repository name with owner. For example, actions/checkout" />
                  <entry key="set-safe-directory" value="r[false] def[true] Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`" />
                  <entry key="ssh-key" value="r[false]" />
                  <entry key="ssh-known-hosts" value="r[false]" />
                  <entry key="ssh-strict" value="r[false] def[true]" />
                  <entry key="submodules" value="r[false] def[false]" />
                  <entry key="token" value="r[false] def[${{ github.token }}]" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/checkout/v2/action.yml" />
                  <entry key="expiryTime" value="1717578370550" />
                  <entry key="githubUrl" value="https://github.com/actions/checkout/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/checkout" />
                  <entry key="usesValue" value="actions/checkout@v2" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/checkout@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="clean" value="r[false] def[true] Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching" />
                  <entry key="fetch-depth" value="r[false] def[1] Number of commits to fetch. 0 indicates all history for all branches and tags." />
                  <entry key="fetch-tags" value="r[false] def[false] Whether to fetch tags, even if fetch-depth &gt; 0." />
                  <entry key="github-server-url" value="r[false] The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com" />
                  <entry key="lfs" value="r[false] def[false] Whether to download Git-LFS files" />
                  <entry key="path" value="r[false] Relative path under $GITHUB_WORKSPACE to place the repository" />
                  <entry key="persist-credentials" value="r[false] def[true] Whether to configure the token or SSH key with the local git config" />
                  <entry key="ref" value="r[false]" />
                  <entry key="repository" value="r[false] def[${{ github.repository }}] Repository name with owner. For example, actions/checkout" />
                  <entry key="set-safe-directory" value="r[false] def[true] Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`" />
                  <entry key="sparse-checkout" value="r[false] def[null]" />
                  <entry key="sparse-checkout-cone-mode" value="r[false] def[true]" />
                  <entry key="ssh-key" value="r[false]" />
                  <entry key="ssh-known-hosts" value="r[false]" />
                  <entry key="ssh-strict" value="r[false] def[true]" />
                  <entry key="submodules" value="r[false] def[false]" />
                  <entry key="token" value="r[false] def[${{ github.token }}]" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/checkout/v3/action.yml" />
                  <entry key="expiryTime" value="1717578370550" />
                  <entry key="githubUrl" value="https://github.com/actions/checkout/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/checkout" />
                  <entry key="usesValue" value="actions/checkout@v3" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-node@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="always-auth" value="r[false] def[false] Set always-auth in npmrc" />
                  <entry key="architecture" value="r[false] Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default." />
                  <entry key="cache" value="r[false] Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm" />
                  <entry key="cache-dependency-path" value="r[false] Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="check-latest" value="r[false] def[false] Set this option if you want the action to check for the latest available version that satisfies the version spec" />
                  <entry key="node-version" value="r[false] Version Spec of the version to use.  Examples: 12.x, 10.15.1, &gt;=10.15.0" />
                  <entry key="node-version-file" value="r[false] File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version" />
                  <entry key="registry-url" value="r[false] Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN" />
                  <entry key="scope" value="r[false] Optional scope for authenticating against scoped registries" />
                  <entry key="token" value="r[false] def[${{ github.token }}] Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user." />
                  <entry key="version" value="r[false] Deprecated. Use node-version instead. Will not be supported after October 1, 2019" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-node/v2/action.yml" />
                  <entry key="expiryTime" value="1717578370550" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-node/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-node" />
                  <entry key="usesValue" value="actions/setup-node@v2" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate if a cache was hit" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-node@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-node/v3/action.yml" />
                  <entry key="expiryTime" value="1717737439702" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-node/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-node" />
                  <entry key="usesValue" value="actions/setup-node@v3" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-python@v4">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="allow-prereleases" value="r[false] def[false] When 'true', a version range passed to 'python-version' input will match prerelease versions if no GA versions are found. Only 'x.y' version range is supported for CPython." />
                  <entry key="architecture" value="r[false] The target architecture (x86, x64) of the Python or PyPy interpreter." />
                  <entry key="cache" value="r[false] Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry." />
                  <entry key="cache-dependency-path" value="r[false] Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="check-latest" value="r[false] def[false] Set this option if you want the action to check for the latest available version that satisfies the version spec." />
                  <entry key="python-version" value="r[false] Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset." />
                  <entry key="python-version-file" value="r[false] File containing the Python version to use. Example: .python-version" />
                  <entry key="token" value="r[false] def[${{ github.server_url == 'https://github.com' &amp;&amp; github.token || '' }}] The token used to authenticate when fetching Python distributions from https://github.com/actions/python-versions. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting." />
                  <entry key="update-environment" value="r[false] def[true] Set this option if you want the action to update environment variables." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-python/v4/action.yml" />
                  <entry key="expiryTime" value="1717158636412" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-python/tree/v4#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-python" />
                  <entry key="usesValue" value="actions/setup-python@v4" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate a cache entry was found" />
                  <entry key="python-path" value="r[false] The absolute path to the Python or PyPy executable." />
                  <entry key="python-version" value="r[false] The installed Python or PyPy version. Useful when given a version range as input." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="azure/login@v1.1">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="allow-no-subscriptions" value="r[false] def[false] Set this value to true to enable support for accessing tenants without subscriptions" />
                  <entry key="creds" value="r[true] Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS" />
                  <entry key="enable-AzPSSession" value="r[false] def[false] Set this value to true to enable Azure PowerShell Login in addition to Az CLI login" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/azure/login/v1.1/action.yml" />
                  <entry key="expiryTime" value="1716811134335" />
                  <entry key="githubUrl" value="https://github.com/azure/login/tree/v1.1#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="azure/login" />
                  <entry key="usesValue" value="azure/login@v1.1" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="google-github-actions/release-please-action@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="bump-minor-pre-major" value="r[false] def[false] should breaking changes before 1.0.0 produce minor bumps" />
                  <entry key="bump-patch-for-minor-pre-major" value="r[false] def[false] should feat changes before 1.0.0 produce patch bumps instead of minor bumps" />
                  <entry key="changelog-path" value="r[false] specify a CHANGELOG path other than the root CHANGELOG.md" />
                  <entry key="changelog-types" value="r[false] changlelog commit types" />
                  <entry key="clean" value="r[false] def[true] Should stale release PRs be closed post release? Defaults to true" />
                  <entry key="command" value="r[false] release-please command to run, either &quot;github-release&quot;, or &quot;release-pr&quot; (defaults to running both)" />
                  <entry key="config-file" value="r[false] where can the config file be found in the project?" />
                  <entry key="default-branch" value="r[false] branch to open pull release PR against (detected by default)" />
                  <entry key="fork" value="r[false] def[false] should the PR be proposed from a fork, Default to false" />
                  <entry key="github-api-url" value="r[false] configure github API URL. Default `https://api.github.com`" />
                  <entry key="github-graphql-url" value="r[false] configure github GraphQL URL. Default `https://api.github.com`" />
                  <entry key="manifest-file" value="r[false] where can the manifest file be found in the project?" />
                  <entry key="monorepo-tags" value="r[false] def[false] add prefix to tags and branches, allowing multiple libraries to be released from the same repository" />
                  <entry key="package-name" value="r[false] name of the distributions releases are being created for, e.g., &quot;name&quot; in package.json, or &quot;setup.py&quot;" />
                  <entry key="path" value="r[false] create a release from a path other than the repository's root" />
                  <entry key="pull-request-title-pattern" value="r[false] def[chore${scope}: release${component} ${version}] add title pattern to make release PR, defaults to using &quot;chore${scope}: release${component} ${version}&quot;." />
                  <entry key="release-type" value="r[true] what type of release is this, one of (ruby, python, node, terraform-module)" />
                  <entry key="repo-url" value="r[false] configure github repository URL. Default `process.env.GITHUB_REPOSITORY`" />
                  <entry key="signoff" value="r[false] Add [`Signed-off-by`](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff) line at the end of the commit log message using the user and email provided. (format &quot;Name \&lt;email@example.com\&gt;&quot;)" />
                  <entry key="token" value="r[false] def[${{ github.token }}] GitHub token for creating and grooming release PRs, defaults to using secrets.GITHUB_TOKEN" />
                  <entry key="version-file" value="r[false] provide a path to a version file to increment (used by ruby releaser)" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/google-github-actions/release-please-action/v2/action.yml" />
                  <entry key="expiryTime" value="1717158636412" />
                  <entry key="githubUrl" value="https://github.com/google-github-actions/release-please-action/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="google-github-actions/release-please-action" />
                  <entry key="usesValue" value="google-github-actions/release-please-action@v2" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="google-github-actions/release-please-action@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="always-link-local" value="r[false] when using the `node-workspace` plugin, setting to false will only bump your local dependencies within the SemVer range (see the manifest releaser docs)[https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md) . Default `true`." />
                  <entry key="bootstrap-sha" value="r[false] if this is the first time running `manifest-pr` on a repo this key will limit how far back (exclusive) to pull commits for conventional commit parsing (see the manifest releaser docs https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md)" />
                  <entry key="bump-minor-pre-major" value="r[false] def[false] should breaking changes before 1.0.0 produce minor bumps" />
                  <entry key="bump-patch-for-minor-pre-major" value="r[false] def[false] should feat changes before 1.0.0 produce patch bumps instead of minor bumps" />
                  <entry key="changelog-host" value="r[false] def[${{ github.server_url }}] The proto://host where commits live." />
                  <entry key="changelog-notes-type" value="r[false] Strategy for building the changelog contents(see https://github.com/googleapis/release-please/blob/main/docs/customizing.md#changelog-types). Default `default`. Called `changelog-type` in release-please documentation." />
                  <entry key="changelog-path" value="r[false] specify a CHANGELOG path other than the root CHANGELOG.md" />
                  <entry key="changelog-types" value="r[false] changlelog commit types" />
                  <entry key="clean" value="r[false] def[true] Should stale release PRs be closed post release? Defaults to true" />
                  <entry key="command" value="r[false] release-please command to run, either &quot;github-release&quot;, or &quot;release-pr&quot; (defaults to running both)" />
                  <entry key="commit-search-depth" value="r[false] when fetching the list of commits to consider, only consider the last N commits" />
                  <entry key="component" value="r[false] name of the component used for branch naming and release tagging, defaults to a normalized version based on the package name" />
                  <entry key="config-file" value="r[false] where can the config file be found in the project?" />
                  <entry key="default-branch" value="r[false] branch to open pull release PR against (detected by default)" />
                  <entry key="draft" value="r[false] mark release as a draft" />
                  <entry key="draft-pull-request" value="r[false] mark pull request as a draft" />
                  <entry key="extra-files" value="r[false] extra files to bump using the generic updater" />
                  <entry key="fork" value="r[false] def[false] should the PR be proposed from a fork, Default to false" />
                  <entry key="github-api-url" value="r[false] def[${{ github.api_url }}] configure github API URL. Default `https://api.github.com`" />
                  <entry key="github-graphql-url" value="r[false] def[${{ github.graphql_url }}] configure github GraphQL URL. Default `https://api.github.com`" />
                  <entry key="group-pull-request-title-pattern" value="r[false] sets the manifest pull request title for when releasing multiple packages grouped together in the one pull request" />
                  <entry key="include-v-in-tag" value="r[false] include &quot;v&quot; in tag versions. Default `true`" />
                  <entry key="labels" value="r[false] list of labels to apply to the release pull requests, defaults to `autorelease: pending`" />
                  <entry key="last-release-sha" value="r[false] overrides the commit sha release-please will use from which to gather commits for the current release (see the manifest releaser docs https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md)" />
                  <entry key="manifest-file" value="r[false] where can the manifest file be found in the project?" />
                  <entry key="monorepo-tags" value="r[false] def[false] add prefix to tags and branches, allowing multiple libraries to be released from the same repository" />
                  <entry key="package-name" value="r[false] name of the distributions releases are being created for, e.g., &quot;name&quot; in package.json, or &quot;setup.py&quot;" />
                  <entry key="path" value="r[false] create a release from a path other than the repository's root" />
                  <entry key="plugins" value="r[false] see https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md#plugins" />
                  <entry key="prerelease" value="r[false] If set, create releases that are pre-major or pre-release version marked as pre-release on Github. Defaults `false`" />
                  <entry key="proxy-server" value="r[false] set proxy sever when you run this action behind a proxy. format is host:port e.g. proxy-host.com:8080" />
                  <entry key="pull-request-header" value="r[false] set release PR header, defaults to using &quot;:robot: I have created a release *beep* *boop*&quot;" />
                  <entry key="pull-request-title-pattern" value="r[false] add title pattern to make release PR, defaults to using &quot;chore${scope}: release${component} ${version}&quot;" />
                  <entry key="release-as" value="r[false] manually set version to this value, ignoring conventional commits. Absence defaults to conventional commits derived next version. Once the release PR is merged you should either remove this or update it to a higher version. Otherwise subsequent `manifest-pr` runs will continue to use this version even though it was already set in the last release." />
                  <entry key="release-labels" value="r[false] set a pull request label other than `autorelease: tagged`" />
                  <entry key="release-search-depth" value="r[false] when searching for the latest release SHAs, only consider the last N releases" />
                  <entry key="release-type" value="r[true] what type of release is this, one of (ruby, python, node, terraform-module)" />
                  <entry key="repo-url" value="r[false] configure github repository URL. Default `process.env.GITHUB_REPOSITORY`" />
                  <entry key="separate-pull-requests" value="r[false] create separate pull requests for each package instead of a single manifest release pull request (see the manifest releaser docs https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md). Default `false`." />
                  <entry key="sequential-calls" value="r[false] issue GitHub API requests sequentially rather than concurrently (see the manifest releaser docs https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md). Default `false`" />
                  <entry key="signoff" value="r[false] Add [`Signed-off-by`](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff) line at the end of the commit log message using the user and email provided. (format &quot;Name \&lt;email@example.com\&gt;&quot;)" />
                  <entry key="skip-github-release" value="r[false] Skip creating GitHub Releases. Default `false`" />
                  <entry key="skip-labeling" value="r[false] if set, labels will not be applied to pull requests. Default `false`." />
                  <entry key="snapshot-labels" value="r[false] sets java snapshot pull request labels other than `autorelease: snapshot`  " />
                  <entry key="tag-separator" value="r[false] configures separator character used in release tag" />
                  <entry key="token" value="r[false] def[${{ github.token }}] GitHub token for creating and grooming release PRs, defaults to using secrets.GITHUB_TOKEN" />
                  <entry key="version-file" value="r[false] provide a path to a version file to increment (used by ruby releaser)" />
                  <entry key="versioning-strategy" value="r[false] Override method of determining SemVer version bumps based on commits (drr https://github.com/googleapis/release-please/blob/main/docs/customizing.md#versioning-strategies). Default `default`" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/google-github-actions/release-please-action/v3/action.yml" />
                  <entry key="expiryTime" value="1717158636412" />
                  <entry key="githubUrl" value="https://github.com/google-github-actions/release-please-action/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="google-github-actions/release-please-action" />
                  <entry key="usesValue" value="google-github-actions/release-please-action@v3" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>