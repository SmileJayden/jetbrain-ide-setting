<application>
  <component name="GitHubActionCache">
    <option name="actions">
      <map>
        <entry key="GoogleCloudPlatform/release-please-action@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="bump-minor-pre-major" value="r[false] def[false] should breaking changes before 1.0.0 produce minor bumps" />
                  <entry key="bump-patch-for-minor-pre-major" value="r[false] def[false] should feat changes before 1.0.0 produce patch bumps instead of minor bumps" />
                  <entry key="changelog-path" value="r[false] specify a CHANGELOG path other than the root CHANGELOG.md" />
                  <entry key="changelog-types" value="r[false] changlelog commit types" />
                  <entry key="clean" value="r[false] def[true] Should stale release PRs be closed post release? Defaults to true" />
                  <entry key="command" value="r[false] release-please command to run, either &quot;github-release&quot;, or &quot;release-pr&quot; (defaults to running both)" />
                  <entry key="config-file" value="r[false] where can the config file be found in the project?" />
                  <entry key="default-branch" value="r[false] branch to open pull release PR against (detected by default)" />
                  <entry key="fork" value="r[false] def[false] should the PR be proposed from a fork, Default to false" />
                  <entry key="github-api-url" value="r[false] configure github API URL. Default `https://api.github.com`" />
                  <entry key="github-graphql-url" value="r[false] configure github GraphQL URL. Default `https://api.github.com`" />
                  <entry key="manifest-file" value="r[false] where can the manifest file be found in the project?" />
                  <entry key="monorepo-tags" value="r[false] def[false] add prefix to tags and branches, allowing multiple libraries to be released from the same repository" />
                  <entry key="package-name" value="r[false] name of the distributions releases are being created for, e.g., &quot;name&quot; in package.json, or &quot;setup.py&quot;" />
                  <entry key="path" value="r[false] create a release from a path other than the repository's root" />
                  <entry key="pull-request-title-pattern" value="r[false] def[chore${scope}: release${component} ${version}] add title pattern to make release PR, defaults to using &quot;chore${scope}: release${component} ${version}&quot;." />
                  <entry key="release-type" value="r[true] what type of release is this, one of (ruby, python, node, terraform-module)" />
                  <entry key="repo-url" value="r[false] configure github repository URL. Default `process.env.GITHUB_REPOSITORY`" />
                  <entry key="signoff" value="r[false] Add [`Signed-off-by`](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff) line at the end of the commit log message using the user and email provided. (format &quot;Name \&lt;email@example.com\&gt;&quot;)" />
                  <entry key="token" value="r[false] def[${{ github.token }}] GitHub token for creating and grooming release PRs, defaults to using secrets.GITHUB_TOKEN" />
                  <entry key="version-file" value="r[false] provide a path to a version file to increment (used by ruby releaser)" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/GoogleCloudPlatform/release-please-action/v2/action.yml" />
                  <entry key="expiryTime" value="1714548827540" />
                  <entry key="githubUrl" value="https://github.com/GoogleCloudPlatform/release-please-action/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="GoogleCloudPlatform/release-please-action" />
                  <entry key="usesValue" value="GoogleCloudPlatform/release-please-action@v2" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="GoogleCloudPlatform/release-please-action@v2.5.6">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="bump-minor-pre-major" value="r[false] should breaking changes before 1.0.0 produce minor bumps" />
                  <entry key="changelog-types" value="r[false] changlelog commit types" />
                  <entry key="command" value="r[false] release-please command to run, either &quot;github-release&quot;, or &quot;release-pr&quot; (defaults to running both)" />
                  <entry key="fork" value="r[false] should the PR be proposed from a fork (does not work with secrets.GITHUB_TOKEN)" />
                  <entry key="monorepo-tags" value="r[false] add prefix to tags and branches, allowing multiple libraries to be released from the same repository" />
                  <entry key="package-name" value="r[true] name of the distributions releases are being created for, e.g., &quot;name&quot; in package.json, or &quot;setup.py&quot;" />
                  <entry key="path" value="r[false] create a release from a path other than the repository's root" />
                  <entry key="release-type" value="r[true] what type of release is this, one of (ruby, python, node, terraform-module)" />
                  <entry key="token" value="r[true] GitHub token for creating and grooming release PRs, e.g., secrets.GITHUB_TOKEN" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/GoogleCloudPlatform/release-please-action/v2.5.6/action.yml" />
                  <entry key="expiryTime" value="1714400189847" />
                  <entry key="githubUrl" value="https://github.com/GoogleCloudPlatform/release-please-action/tree/v2.5.6#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="GoogleCloudPlatform/release-please-action" />
                  <entry key="usesValue" value="GoogleCloudPlatform/release-please-action@v2.5.6" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/checkout@v1">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="clean" value="r[false] def[true] If true, execute `execute git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching" />
                  <entry key="fetch-depth" value="r[false] The depth of commits to ask Git to fetch; defaults to no limit" />
                  <entry key="lfs" value="r[false] Whether to download Git-LFS files; defaults to false" />
                  <entry key="path" value="r[false] Optional path to check out source code" />
                  <entry key="ref" value="r[false] Ref to checkout (SHA, branch, tag)" />
                  <entry key="repository" value="r[false] Repository name" />
                  <entry key="submodules" value="r[false] Whether to include submodules: false to exclude submodules, true to include only one level of submodules, or recursive to recursively clone submodules; defaults to false" />
                  <entry key="token" value="r[false] Access token for clone repository" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/checkout/v1/action.yml" />
                  <entry key="expiryTime" value="1714548647748" />
                  <entry key="githubUrl" value="https://github.com/actions/checkout/tree/v1#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/checkout" />
                  <entry key="usesValue" value="actions/checkout@v1" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/checkout@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="clean" value="r[false] def[true] Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching" />
                  <entry key="fetch-depth" value="r[false] def[1] Number of commits to fetch. 0 indicates all history for all branches and tags." />
                  <entry key="lfs" value="r[false] def[false] Whether to download Git-LFS files" />
                  <entry key="path" value="r[false] Relative path under $GITHUB_WORKSPACE to place the repository" />
                  <entry key="persist-credentials" value="r[false] def[true] Whether to configure the token or SSH key with the local git config" />
                  <entry key="ref" value="r[false]" />
                  <entry key="repository" value="r[false] def[${{ github.repository }}] Repository name with owner. For example, actions/checkout" />
                  <entry key="set-safe-directory" value="r[false] def[true] Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`" />
                  <entry key="ssh-key" value="r[false]" />
                  <entry key="ssh-known-hosts" value="r[false]" />
                  <entry key="ssh-strict" value="r[false] def[true]" />
                  <entry key="submodules" value="r[false] def[false]" />
                  <entry key="token" value="r[false] def[${{ github.token }}]" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/checkout/v2/action.yml" />
                  <entry key="expiryTime" value="1714400254654" />
                  <entry key="githubUrl" value="https://github.com/actions/checkout/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/checkout" />
                  <entry key="usesValue" value="actions/checkout@v2" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/checkout@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="clean" value="r[false] def[true] Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching" />
                  <entry key="fetch-depth" value="r[false] def[1] Number of commits to fetch. 0 indicates all history for all branches and tags." />
                  <entry key="fetch-tags" value="r[false] def[false] Whether to fetch tags, even if fetch-depth &gt; 0." />
                  <entry key="github-server-url" value="r[false] The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com" />
                  <entry key="lfs" value="r[false] def[false] Whether to download Git-LFS files" />
                  <entry key="path" value="r[false] Relative path under $GITHUB_WORKSPACE to place the repository" />
                  <entry key="persist-credentials" value="r[false] def[true] Whether to configure the token or SSH key with the local git config" />
                  <entry key="ref" value="r[false]" />
                  <entry key="repository" value="r[false] def[${{ github.repository }}] Repository name with owner. For example, actions/checkout" />
                  <entry key="set-safe-directory" value="r[false] def[true] Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`" />
                  <entry key="sparse-checkout" value="r[false] def[null]" />
                  <entry key="sparse-checkout-cone-mode" value="r[false] def[true]" />
                  <entry key="ssh-key" value="r[false]" />
                  <entry key="ssh-known-hosts" value="r[false]" />
                  <entry key="ssh-strict" value="r[false] def[true]" />
                  <entry key="submodules" value="r[false] def[false]" />
                  <entry key="token" value="r[false] def[${{ github.token }}]" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/checkout/v3/action.yml" />
                  <entry key="expiryTime" value="1713856019943" />
                  <entry key="githubUrl" value="https://github.com/actions/checkout/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/checkout" />
                  <entry key="usesValue" value="actions/checkout@v3" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-java@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="architecture" value="r[false] The architecture of the package (defaults to the action runner's architecture)" />
                  <entry key="cache" value="r[false] Name of the build platform to cache dependencies. It can be &quot;maven&quot;, &quot;gradle&quot; or &quot;sbt&quot;." />
                  <entry key="check-latest" value="r[false] def[false] Set this option if you want the action to check for the latest available version that satisfies the version spec" />
                  <entry key="distribution" value="r[true] Java distribution. See the list of supported distributions in README file" />
                  <entry key="gpg-passphrase" value="r[false] Environment variable name for the GPG private key passphrase. Default is&#10;       $GPG_PASSPHRASE." />
                  <entry key="gpg-private-key" value="r[false] GPG private key to import. Default is empty string." />
                  <entry key="java-package" value="r[false] def[jdk] The package type (jdk, jre, jdk+fx, jre+fx)" />
                  <entry key="java-version" value="r[false] The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file" />
                  <entry key="java-version-file" value="r[false] The path to the `.java-version` file. See examples of supported syntax in README file" />
                  <entry key="jdkFile" value="r[false] Path to where the compressed JDK is located" />
                  <entry key="job-status" value="r[false] def[${{ job.status }}] Workaround to pass job status to post job step. This variable is not intended for manual setting" />
                  <entry key="mvn-toolchain-id" value="r[false] Name of Maven Toolchain ID if the default name of &quot;${distribution}_${java-version}&quot; is not wanted. See examples of supported syntax in Advanced Usage file" />
                  <entry key="mvn-toolchain-vendor" value="r[false] Name of Maven Toolchain Vendor if the default name of &quot;${distribution}&quot; is not wanted. See examples of supported syntax in Advanced Usage file" />
                  <entry key="overwrite-settings" value="r[false] def[true] Overwrite the settings.xml file if it exists. Default is &quot;true&quot;." />
                  <entry key="server-id" value="r[false] def[github] ID of the distributionManagement repository in the pom.xml&#10;       file. Default is `github`" />
                  <entry key="server-password" value="r[false] def[GITHUB_TOKEN] Environment variable name for password or token for&#10;       authentication to the Apache Maven repository. Default is $GITHUB_TOKEN" />
                  <entry key="server-username" value="r[false] def[GITHUB_ACTOR] Environment variable name for the username for authentication&#10;       to the Apache Maven repository. Default is $GITHUB_ACTOR" />
                  <entry key="settings-path" value="r[false] Path to where the settings.xml file will be written. Default is ~/.m2." />
                  <entry key="token" value="r[false] def[${{ github.server_url == 'https://github.com' &amp;&amp; github.token || '' }}] The token used to authenticate when fetching version manifests hosted on github.com, such as for the Microsoft Build of OpenJDK. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-java/v3/action.yml" />
                  <entry key="expiryTime" value="1714660834131" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-java/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-java" />
                  <entry key="usesValue" value="actions/setup-java@v3" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate an exact match was found for the primary key" />
                  <entry key="distribution" value="r[false] Distribution of Java that has been installed" />
                  <entry key="path" value="r[false] Path to where the java environment has been installed (same as $JAVA_HOME)" />
                  <entry key="version" value="r[false] Actual version of the java environment that has been installed" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-node@v1">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="always-auth" value="r[false] def[false] Set always-auth in npmrc" />
                  <entry key="node-version" value="r[false] def[10.x] Version Spec of the version to use.  Examples: 10.x, 10.15.1, &gt;=10.15.0" />
                  <entry key="registry-url" value="r[false] Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN" />
                  <entry key="scope" value="r[false] Optional scope for authenticating against scoped registries" />
                  <entry key="version" value="r[false] Deprecated. Use node-version instead. Will not be supported after October 1, 2019" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-node/v1/action.yml" />
                  <entry key="expiryTime" value="1714548647748" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-node/tree/v1#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-node" />
                  <entry key="usesValue" value="actions/setup-node@v1" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-node@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="always-auth" value="r[false] def[false] Set always-auth in npmrc" />
                  <entry key="architecture" value="r[false] Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default." />
                  <entry key="cache" value="r[false] Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm" />
                  <entry key="cache-dependency-path" value="r[false] Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="check-latest" value="r[false] def[false] Set this option if you want the action to check for the latest available version that satisfies the version spec" />
                  <entry key="node-version" value="r[false] Version Spec of the version to use.  Examples: 12.x, 10.15.1, &gt;=10.15.0" />
                  <entry key="node-version-file" value="r[false] File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version" />
                  <entry key="registry-url" value="r[false] Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN" />
                  <entry key="scope" value="r[false] Optional scope for authenticating against scoped registries" />
                  <entry key="token" value="r[false] def[${{ github.token }}] Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user." />
                  <entry key="version" value="r[false] Deprecated. Use node-version instead. Will not be supported after October 1, 2019" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-node/v2/action.yml" />
                  <entry key="expiryTime" value="1714400254654" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-node/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-node" />
                  <entry key="usesValue" value="actions/setup-node@v2" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate if a cache was hit" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-node@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="always-auth" value="r[false] def[false] Set always-auth in npmrc." />
                  <entry key="architecture" value="r[false] Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default." />
                  <entry key="cache" value="r[false] Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm." />
                  <entry key="cache-dependency-path" value="r[false] Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="check-latest" value="r[false] def[false] Set this option if you want the action to check for the latest available version that satisfies the version spec." />
                  <entry key="node-version" value="r[false] Version Spec of the version to use. Examples: 12.x, 10.15.1, &gt;=10.15.0." />
                  <entry key="node-version-file" value="r[false] File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions." />
                  <entry key="registry-url" value="r[false] Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN." />
                  <entry key="scope" value="r[false] Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/)." />
                  <entry key="token" value="r[false] def[${{ github.server_url == 'https://github.com' &amp;&amp; github.token || '' }}] Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-node/v3/action.yml" />
                  <entry key="expiryTime" value="1714660834131" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-node/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-node" />
                  <entry key="usesValue" value="actions/setup-node@v3" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate if a cache was hit." />
                  <entry key="node-version" value="r[false] The installed node version." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-node@v4">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="always-auth" value="r[false] def[false] Set always-auth in npmrc." />
                  <entry key="architecture" value="r[false] Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default." />
                  <entry key="cache" value="r[false] Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm." />
                  <entry key="cache-dependency-path" value="r[false] Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="check-latest" value="r[false] def[false] Set this option if you want the action to check for the latest available version that satisfies the version spec." />
                  <entry key="node-version" value="r[false] Version Spec of the version to use. Examples: 12.x, 10.15.1, &gt;=10.15.0." />
                  <entry key="node-version-file" value="r[false] File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions." />
                  <entry key="registry-url" value="r[false] Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN." />
                  <entry key="scope" value="r[false] Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/)." />
                  <entry key="token" value="r[false] def[${{ github.server_url == 'https://github.com' &amp;&amp; github.token || '' }}] Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-node/v4/action.yml" />
                  <entry key="expiryTime" value="1714663659102" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-node/tree/v4#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-node" />
                  <entry key="usesValue" value="actions/setup-node@v4" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate if a cache was hit." />
                  <entry key="node-version" value="r[false] The installed node version." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-python@v1">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="architecture" value="r[false] def[x64] The target architecture (x86, x64) of the Python interpreter." />
                  <entry key="python-version" value="r[false] def[3.x] Version range or exact version of a Python version to use, using SemVer's version range syntax." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-python/v1/action.yml" />
                  <entry key="expiryTime" value="1714400189847" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-python/tree/v1#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-python" />
                  <entry key="usesValue" value="actions/setup-python@v1" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="python-version" value="r[false] The installed python version. Useful when given a version range as input." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-python@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="architecture" value="r[false] The target architecture (x86, x64) of the Python interpreter." />
                  <entry key="cache" value="r[false] Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv." />
                  <entry key="cache-dependency-path" value="r[false] Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="python-version" value="r[false] def[3.x] Version range or exact version of a Python version to use, using SemVer's version range syntax." />
                  <entry key="token" value="r[false] def[${{ github.token }}] Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-python/v2/action.yml" />
                  <entry key="expiryTime" value="1714400189847" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-python/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-python" />
                  <entry key="usesValue" value="actions/setup-python@v2" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="python-version" value="r[false] The installed python version. Useful when given a version range as input." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-python@v4">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="allow-prereleases" value="r[false] def[false] When 'true', a version range passed to 'python-version' input will match prerelease versions if no GA versions are found. Only 'x.y' version range is supported for CPython." />
                  <entry key="architecture" value="r[false] The target architecture (x86, x64) of the Python or PyPy interpreter." />
                  <entry key="cache" value="r[false] Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry." />
                  <entry key="cache-dependency-path" value="r[false] Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="check-latest" value="r[false] def[false] Set this option if you want the action to check for the latest available version that satisfies the version spec." />
                  <entry key="python-version" value="r[false] Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset." />
                  <entry key="python-version-file" value="r[false] File containing the Python version to use. Example: .python-version" />
                  <entry key="token" value="r[false] def[${{ github.server_url == 'https://github.com' &amp;&amp; github.token || '' }}] The token used to authenticate when fetching Python distributions from https://github.com/actions/python-versions. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting." />
                  <entry key="update-environment" value="r[false] def[true] Set this option if you want the action to update environment variables." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-python/v4/action.yml" />
                  <entry key="expiryTime" value="1714959477550" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-python/tree/v4#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-python" />
                  <entry key="usesValue" value="actions/setup-python@v4" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate a cache entry was found" />
                  <entry key="python-path" value="r[false] The absolute path to the Python or PyPy executable." />
                  <entry key="python-version" value="r[false] The installed Python or PyPy version. Useful when given a version range as input." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="coverallsapp/github-action@master">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="base-path" value="r[false] The root folder of the project that originally ran the tests" />
                  <entry key="carryforward" value="r[false] Comma separated flags used to carryforward results from previous builds if some of the parallel jobs are missing." />
                  <entry key="coveralls-endpoint" value="r[false] def[https://coveralls.io] Coveralls Enterprise server (more info: https://enterprise.coveralls.io)" />
                  <entry key="debug" value="r[false] def[false] Enable debug logging" />
                  <entry key="flag-name" value="r[false] Job flag name, e.g. &quot;Unit&quot;, &quot;Functional&quot;, or &quot;Integration&quot;. Will be shown in the Coveralls UI." />
                  <entry key="git-branch" value="r[false] Override the branch name" />
                  <entry key="git-commit" value="r[false] Override the commit sha" />
                  <entry key="github-token" value="r[false] def[${{ github.token }}] Put secrets.GITHUB_TOKEN here" />
                  <entry key="parallel" value="r[false] Set to true if you are running parallel jobs, then use &quot;parallel-finished: true&quot; for the last action." />
                  <entry key="parallel-finished" value="r[false] Set to true for the last action when using &quot;parallel: true&quot;." />
                  <entry key="path-to-lcov" value="r[false] def[./coverage/lcov.info] Path to lcov file" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/coverallsapp/github-action/master/action.yml" />
                  <entry key="expiryTime" value="1714548827541" />
                  <entry key="githubUrl" value="https://github.com/coverallsapp/github-action/tree/master#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="coverallsapp/github-action" />
                  <entry key="usesValue" value="coverallsapp/github-action@master" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="coveralls-api-result" value="r[false] Result status of Coveralls API post." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="google-github-actions/release-please-action@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="bump-minor-pre-major" value="r[false] def[false] should breaking changes before 1.0.0 produce minor bumps" />
                  <entry key="bump-patch-for-minor-pre-major" value="r[false] def[false] should feat changes before 1.0.0 produce patch bumps instead of minor bumps" />
                  <entry key="changelog-path" value="r[false] specify a CHANGELOG path other than the root CHANGELOG.md" />
                  <entry key="changelog-types" value="r[false] changlelog commit types" />
                  <entry key="clean" value="r[false] def[true] Should stale release PRs be closed post release? Defaults to true" />
                  <entry key="command" value="r[false] release-please command to run, either &quot;github-release&quot;, or &quot;release-pr&quot; (defaults to running both)" />
                  <entry key="config-file" value="r[false] where can the config file be found in the project?" />
                  <entry key="default-branch" value="r[false] branch to open pull release PR against (detected by default)" />
                  <entry key="fork" value="r[false] def[false] should the PR be proposed from a fork, Default to false" />
                  <entry key="github-api-url" value="r[false] configure github API URL. Default `https://api.github.com`" />
                  <entry key="github-graphql-url" value="r[false] configure github GraphQL URL. Default `https://api.github.com`" />
                  <entry key="manifest-file" value="r[false] where can the manifest file be found in the project?" />
                  <entry key="monorepo-tags" value="r[false] def[false] add prefix to tags and branches, allowing multiple libraries to be released from the same repository" />
                  <entry key="package-name" value="r[false] name of the distributions releases are being created for, e.g., &quot;name&quot; in package.json, or &quot;setup.py&quot;" />
                  <entry key="path" value="r[false] create a release from a path other than the repository's root" />
                  <entry key="pull-request-title-pattern" value="r[false] def[chore${scope}: release${component} ${version}] add title pattern to make release PR, defaults to using &quot;chore${scope}: release${component} ${version}&quot;." />
                  <entry key="release-type" value="r[true] what type of release is this, one of (ruby, python, node, terraform-module)" />
                  <entry key="repo-url" value="r[false] configure github repository URL. Default `process.env.GITHUB_REPOSITORY`" />
                  <entry key="signoff" value="r[false] Add [`Signed-off-by`](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff) line at the end of the commit log message using the user and email provided. (format &quot;Name \&lt;email@example.com\&gt;&quot;)" />
                  <entry key="token" value="r[false] def[${{ github.token }}] GitHub token for creating and grooming release PRs, defaults to using secrets.GITHUB_TOKEN" />
                  <entry key="version-file" value="r[false] provide a path to a version file to increment (used by ruby releaser)" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/google-github-actions/release-please-action/v2/action.yml" />
                  <entry key="expiryTime" value="1714959477550" />
                  <entry key="githubUrl" value="https://github.com/google-github-actions/release-please-action/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="google-github-actions/release-please-action" />
                  <entry key="usesValue" value="google-github-actions/release-please-action@v2" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="google-github-actions/release-please-action@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="always-link-local" value="r[false] when using the `node-workspace` plugin, setting to false will only bump your local dependencies within the SemVer range (see the manifest releaser docs)[https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md) . Default `true`." />
                  <entry key="bootstrap-sha" value="r[false] if this is the first time running `manifest-pr` on a repo this key will limit how far back (exclusive) to pull commits for conventional commit parsing (see the manifest releaser docs https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md)" />
                  <entry key="bump-minor-pre-major" value="r[false] def[false] should breaking changes before 1.0.0 produce minor bumps" />
                  <entry key="bump-patch-for-minor-pre-major" value="r[false] def[false] should feat changes before 1.0.0 produce patch bumps instead of minor bumps" />
                  <entry key="changelog-host" value="r[false] def[${{ github.server_url }}] The proto://host where commits live." />
                  <entry key="changelog-notes-type" value="r[false] Strategy for building the changelog contents(see https://github.com/googleapis/release-please/blob/main/docs/customizing.md#changelog-types). Default `default`. Called `changelog-type` in release-please documentation." />
                  <entry key="changelog-path" value="r[false] specify a CHANGELOG path other than the root CHANGELOG.md" />
                  <entry key="changelog-types" value="r[false] changlelog commit types" />
                  <entry key="clean" value="r[false] def[true] Should stale release PRs be closed post release? Defaults to true" />
                  <entry key="command" value="r[false] release-please command to run, either &quot;github-release&quot;, or &quot;release-pr&quot; (defaults to running both)" />
                  <entry key="commit-search-depth" value="r[false] when fetching the list of commits to consider, only consider the last N commits" />
                  <entry key="component" value="r[false] name of the component used for branch naming and release tagging, defaults to a normalized version based on the package name" />
                  <entry key="config-file" value="r[false] where can the config file be found in the project?" />
                  <entry key="default-branch" value="r[false] branch to open pull release PR against (detected by default)" />
                  <entry key="draft" value="r[false] mark release as a draft" />
                  <entry key="draft-pull-request" value="r[false] mark pull request as a draft" />
                  <entry key="extra-files" value="r[false] extra files to bump using the generic updater" />
                  <entry key="fork" value="r[false] def[false] should the PR be proposed from a fork, Default to false" />
                  <entry key="github-api-url" value="r[false] def[${{ github.api_url }}] configure github API URL. Default `https://api.github.com`" />
                  <entry key="github-graphql-url" value="r[false] def[${{ github.graphql_url }}] configure github GraphQL URL. Default `https://api.github.com`" />
                  <entry key="group-pull-request-title-pattern" value="r[false] sets the manifest pull request title for when releasing multiple packages grouped together in the one pull request" />
                  <entry key="include-v-in-tag" value="r[false] include &quot;v&quot; in tag versions. Default `true`" />
                  <entry key="labels" value="r[false] list of labels to apply to the release pull requests, defaults to `autorelease: pending`" />
                  <entry key="last-release-sha" value="r[false] overrides the commit sha release-please will use from which to gather commits for the current release (see the manifest releaser docs https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md)" />
                  <entry key="manifest-file" value="r[false] where can the manifest file be found in the project?" />
                  <entry key="monorepo-tags" value="r[false] def[false] add prefix to tags and branches, allowing multiple libraries to be released from the same repository" />
                  <entry key="package-name" value="r[false] name of the distributions releases are being created for, e.g., &quot;name&quot; in package.json, or &quot;setup.py&quot;" />
                  <entry key="path" value="r[false] create a release from a path other than the repository's root" />
                  <entry key="plugins" value="r[false] see https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md#plugins" />
                  <entry key="prerelease" value="r[false] If set, create releases that are pre-major or pre-release version marked as pre-release on Github. Defaults `false`" />
                  <entry key="proxy-server" value="r[false] set proxy sever when you run this action behind a proxy. format is host:port e.g. proxy-host.com:8080" />
                  <entry key="pull-request-header" value="r[false] set release PR header, defaults to using &quot;:robot: I have created a release *beep* *boop*&quot;" />
                  <entry key="pull-request-title-pattern" value="r[false] add title pattern to make release PR, defaults to using &quot;chore${scope}: release${component} ${version}&quot;" />
                  <entry key="release-as" value="r[false] manually set version to this value, ignoring conventional commits. Absence defaults to conventional commits derived next version. Once the release PR is merged you should either remove this or update it to a higher version. Otherwise subsequent `manifest-pr` runs will continue to use this version even though it was already set in the last release." />
                  <entry key="release-labels" value="r[false] set a pull request label other than `autorelease: tagged`" />
                  <entry key="release-search-depth" value="r[false] when searching for the latest release SHAs, only consider the last N releases" />
                  <entry key="release-type" value="r[true] what type of release is this, one of (ruby, python, node, terraform-module)" />
                  <entry key="repo-url" value="r[false] configure github repository URL. Default `process.env.GITHUB_REPOSITORY`" />
                  <entry key="separate-pull-requests" value="r[false] create separate pull requests for each package instead of a single manifest release pull request (see the manifest releaser docs https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md). Default `false`." />
                  <entry key="sequential-calls" value="r[false] issue GitHub API requests sequentially rather than concurrently (see the manifest releaser docs https://github.com/googleapis/release-please/blob/main/docs/manifest-releaser.md). Default `false`" />
                  <entry key="signoff" value="r[false] Add [`Signed-off-by`](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff) line at the end of the commit log message using the user and email provided. (format &quot;Name \&lt;email@example.com\&gt;&quot;)" />
                  <entry key="skip-github-release" value="r[false] Skip creating GitHub Releases. Default `false`" />
                  <entry key="skip-labeling" value="r[false] if set, labels will not be applied to pull requests. Default `false`." />
                  <entry key="snapshot-labels" value="r[false] sets java snapshot pull request labels other than `autorelease: snapshot`  " />
                  <entry key="tag-separator" value="r[false] configures separator character used in release tag" />
                  <entry key="token" value="r[false] def[${{ github.token }}] GitHub token for creating and grooming release PRs, defaults to using secrets.GITHUB_TOKEN" />
                  <entry key="version-file" value="r[false] provide a path to a version file to increment (used by ruby releaser)" />
                  <entry key="versioning-strategy" value="r[false] Override method of determining SemVer version bumps based on commits (drr https://github.com/googleapis/release-please/blob/main/docs/customizing.md#versioning-strategies). Default `default`" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/google-github-actions/release-please-action/v3/action.yml" />
                  <entry key="expiryTime" value="1714959477550" />
                  <entry key="githubUrl" value="https://github.com/google-github-actions/release-please-action/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="google-github-actions/release-please-action" />
                  <entry key="usesValue" value="google-github-actions/release-please-action@v3" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="ljharb/actions/node/matrix@main">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="envs" value="r[false] optional env variables to add to the matrix" />
                  <entry key="notable" value="r[false] semver range for notable versions, that should be pulled from &quot;preset&quot; into &quot;required&quot;" />
                  <entry key="optionals" value="r[false] semver range for optional versions" />
                  <entry key="preset" value="r[false] optional preset, takes precedence over requireds/optionals" />
                  <entry key="requireds" value="r[false] semver range for required versions" />
                  <entry key="type" value="r[false] majors, or minors?" />
                  <entry key="version_key" value="r[false] def[node-version] key in JSON output to contain versions" />
                  <entry key="versionsAsRoot" value="r[false] ignore the version_key, and make the versions be the root of the outputs?" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/ljharb/actions/main/node/matrix/action.yml" />
                  <entry key="expiryTime" value="1714548827540" />
                  <entry key="githubUrl" value="https://github.com/ljharb/actions/tree/main/node/matrix#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="ljharb/actions" />
                  <entry key="usesValue" value="ljharb/actions/node/matrix@main" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="optionals" value="r[false] JSON object containing allowed-to-fail versions" />
                  <entry key="requireds" value="r[false] JSON object containing required-to-pass versions" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="ljharb/actions/node/run@main">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="after_install" value="r[false] command to run after `npm install`" />
                  <entry key="after_success" value="r[false] command to run after everything succeeds. default runs codecov" />
                  <entry key="before_install" value="r[false] command to run before `npm install`" />
                  <entry key="cache-node-modules-key" value="r[false] if provided, cache node_modules under this cache key" />
                  <entry key="command" value="r[false] `npm run` command" />
                  <entry key="node-version" value="r[false] def[lts/*] version of node to use via nvm" />
                  <entry key="shell-command" value="r[false] shell command, mutually exclusive with `command`" />
                  <entry key="skip-install" value="r[false] def[false] skip `npm install` step" />
                  <entry key="skip-ls-check" value="r[false] def[false] skip the `npm ls` check (not recommended)" />
                  <entry key="use-npm-ci" value="r[false] def[false] if true, will use `npm ci` instead of `npm install`" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/ljharb/actions/main/node/run/action.yml" />
                  <entry key="expiryTime" value="1714548827540" />
                  <entry key="githubUrl" value="https://github.com/ljharb/actions/tree/main/node/run#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="ljharb/actions" />
                  <entry key="usesValue" value="ljharb/actions/node/run@main" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="ljharb/rebase@master">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/ljharb/rebase/master/action.yml" />
                  <entry key="expiryTime" value="1714548647748" />
                  <entry key="githubUrl" value="https://github.com/ljharb/rebase/tree/master#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="ljharb/rebase" />
                  <entry key="usesValue" value="ljharb/rebase@master" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="ljharb/require-allow-edits@main">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="github_token" value="r[true] def[${{ github.token }}] The GitHub token (if not provided, the env var GITHUB_TOKEN will be used)" />
                  <entry key="pull_number" value="r[true] The pull request number" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/ljharb/require-allow-edits/main/action.yml" />
                  <entry key="expiryTime" value="1714548827540" />
                  <entry key="githubUrl" value="https://github.com/ljharb/require-allow-edits/tree/main#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="ljharb/require-allow-edits" />
                  <entry key="usesValue" value="ljharb/require-allow-edits@main" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="maintainer_can_modify" value="r[false] Whether the &quot;allow edits&quot; box is checked or not" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="pnpm/action-setup@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="dest" value="r[false] def[~/setup-pnpm] Where to store pnpm files" />
                  <entry key="package_json_file" value="r[false] def[package.json] File path to the package.json to read &quot;packageManager&quot; configuration" />
                  <entry key="run_install" value="r[false] def[null] If specified, run `pnpm install`" />
                  <entry key="standalone" value="r[false] def[false] When set to true, @pnpm/exe, which is a Node.js bundled package, will be installed, enabling using pnpm without Node.js." />
                  <entry key="version" value="r[false] Version of pnpm to install" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/pnpm/action-setup/v2/action.yml" />
                  <entry key="expiryTime" value="1714663555827" />
                  <entry key="githubUrl" value="https://github.com/pnpm/action-setup/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="pnpm/action-setup" />
                  <entry key="usesValue" value="pnpm/action-setup@v2" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>