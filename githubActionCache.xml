<application>
  <component name="GitHubActionCache">
    <option name="actions">
      <map>
        <entry key="actions/cache@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="enableCrossOsArchive" value="r[false] def[false] An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms" />
                  <entry key="fail-on-cache-miss" value="r[false] def[false] Fail the workflow if cache entry is not found" />
                  <entry key="key" value="r[true] An explicit key for restoring and saving the cache" />
                  <entry key="lookup-only" value="r[false] def[false] Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache" />
                  <entry key="path" value="r[true] A list of files, directories, and wildcard patterns to cache and restore" />
                  <entry key="restore-keys" value="r[false] An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case." />
                  <entry key="upload-chunk-size" value="r[false] The chunk size used to split up large files during upload, in bytes" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/cache/v3/action.yml" />
                  <entry key="expiryTime" value="1719800296004" />
                  <entry key="githubUrl" value="https://github.com/actions/cache/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/cache" />
                  <entry key="usesValue" value="actions/cache@v3" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate an exact match was found for the primary key" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/checkout@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="clean" value="r[false] def[true] Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching" />
                  <entry key="fetch-depth" value="r[false] def[1] Number of commits to fetch. 0 indicates all history for all branches and tags." />
                  <entry key="lfs" value="r[false] def[false] Whether to download Git-LFS files" />
                  <entry key="path" value="r[false] Relative path under $GITHUB_WORKSPACE to place the repository" />
                  <entry key="persist-credentials" value="r[false] def[true] Whether to configure the token or SSH key with the local git config" />
                  <entry key="ref" value="r[false]" />
                  <entry key="repository" value="r[false] def[${{ github.repository }}] Repository name with owner. For example, actions/checkout" />
                  <entry key="set-safe-directory" value="r[false] def[true] Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`" />
                  <entry key="ssh-key" value="r[false]" />
                  <entry key="ssh-known-hosts" value="r[false]" />
                  <entry key="ssh-strict" value="r[false] def[true]" />
                  <entry key="submodules" value="r[false] def[false]" />
                  <entry key="token" value="r[false] def[${{ github.token }}]" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/checkout/v2/action.yml" />
                  <entry key="expiryTime" value="1719798212418" />
                  <entry key="githubUrl" value="https://github.com/actions/checkout/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/checkout" />
                  <entry key="usesValue" value="actions/checkout@v2" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/checkout@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="clean" value="r[false] def[true] Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching" />
                  <entry key="fetch-depth" value="r[false] def[1] Number of commits to fetch. 0 indicates all history for all branches and tags." />
                  <entry key="fetch-tags" value="r[false] def[false] Whether to fetch tags, even if fetch-depth &gt; 0." />
                  <entry key="github-server-url" value="r[false] The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com" />
                  <entry key="lfs" value="r[false] def[false] Whether to download Git-LFS files" />
                  <entry key="path" value="r[false] Relative path under $GITHUB_WORKSPACE to place the repository" />
                  <entry key="persist-credentials" value="r[false] def[true] Whether to configure the token or SSH key with the local git config" />
                  <entry key="ref" value="r[false]" />
                  <entry key="repository" value="r[false] def[${{ github.repository }}] Repository name with owner. For example, actions/checkout" />
                  <entry key="set-safe-directory" value="r[false] def[true] Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`" />
                  <entry key="sparse-checkout" value="r[false] def[null]" />
                  <entry key="sparse-checkout-cone-mode" value="r[false] def[true]" />
                  <entry key="ssh-key" value="r[false]" />
                  <entry key="ssh-known-hosts" value="r[false]" />
                  <entry key="ssh-strict" value="r[false] def[true]" />
                  <entry key="submodules" value="r[false] def[false]" />
                  <entry key="token" value="r[false] def[${{ github.token }}]" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/checkout/v3/action.yml" />
                  <entry key="expiryTime" value="1720003778721" />
                  <entry key="githubUrl" value="https://github.com/actions/checkout/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/checkout" />
                  <entry key="usesValue" value="actions/checkout@v3" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/github-script@v4">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="debug" value="r[false] def[false] Whether to tell the GitHub client to log details of its requests" />
                  <entry key="github-token" value="r[false] def[${{ github.token }}] The GitHub token used to create an authenticated client" />
                  <entry key="previews" value="r[false] A comma-separated list of API previews to accept" />
                  <entry key="result-encoding" value="r[false] def[json] Either &quot;string&quot; or &quot;json&quot; (default &quot;json&quot;)â€”how the result will be encoded" />
                  <entry key="script" value="r[true] The script to run" />
                  <entry key="user-agent" value="r[false] def[actions/github-script] An optional user-agent string" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/github-script/v4/action.yml" />
                  <entry key="expiryTime" value="1719909368292" />
                  <entry key="githubUrl" value="https://github.com/actions/github-script/tree/v4#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/github-script" />
                  <entry key="usesValue" value="actions/github-script@v4" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="result" value="r[false] The return value of the script, stringified with `JSON.stringify`" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/github-script@v5">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="debug" value="r[false] def[false] Whether to tell the GitHub client to log details of its requests" />
                  <entry key="github-token" value="r[false] def[${{ github.token }}] The GitHub token used to create an authenticated client" />
                  <entry key="previews" value="r[false] A comma-separated list of API previews to accept" />
                  <entry key="result-encoding" value="r[false] def[json] Either &quot;string&quot; or &quot;json&quot; (default &quot;json&quot;)â€”how the result will be encoded" />
                  <entry key="script" value="r[true] The script to run" />
                  <entry key="user-agent" value="r[false] def[actions/github-script] An optional user-agent string" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/github-script/v5/action.yml" />
                  <entry key="expiryTime" value="1719909368292" />
                  <entry key="githubUrl" value="https://github.com/actions/github-script/tree/v5#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/github-script" />
                  <entry key="usesValue" value="actions/github-script@v5" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="result" value="r[false] The return value of the script, stringified with `JSON.stringify`" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-node@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="always-auth" value="r[false] def[false] Set always-auth in npmrc" />
                  <entry key="architecture" value="r[false] Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default." />
                  <entry key="cache" value="r[false] Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm" />
                  <entry key="cache-dependency-path" value="r[false] Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="check-latest" value="r[false] def[false] Set this option if you want the action to check for the latest available version that satisfies the version spec" />
                  <entry key="node-version" value="r[false] Version Spec of the version to use.  Examples: 12.x, 10.15.1, &gt;=10.15.0" />
                  <entry key="node-version-file" value="r[false] File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version" />
                  <entry key="registry-url" value="r[false] Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN" />
                  <entry key="scope" value="r[false] Optional scope for authenticating against scoped registries" />
                  <entry key="token" value="r[false] def[${{ github.token }}] Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user." />
                  <entry key="version" value="r[false] Deprecated. Use node-version instead. Will not be supported after October 1, 2019" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-node/v2/action.yml" />
                  <entry key="expiryTime" value="1719798212418" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-node/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-node" />
                  <entry key="usesValue" value="actions/setup-node@v2" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value="r[false] A boolean value to indicate if a cache was hit" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="azure/login@v1.1">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="allow-no-subscriptions" value="r[false] def[false] Setâ€¯thisâ€¯valueâ€¯toâ€¯trueâ€¯to enable support for accessing tenants without subscriptions" />
                  <entry key="creds" value="r[true] Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS" />
                  <entry key="enable-AzPSSession" value="r[false] def[false] Setâ€¯thisâ€¯valueâ€¯toâ€¯trueâ€¯toâ€¯enableâ€¯Azureâ€¯PowerShellâ€¯Loginâ€¯inâ€¯additionâ€¯toâ€¯Azâ€¯CLIâ€¯login" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/azure/login/v1.1/action.yml" />
                  <entry key="expiryTime" value="1719989621497" />
                  <entry key="githubUrl" value="https://github.com/azure/login/tree/v1.1#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSchema" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="azure/login" />
                  <entry key="usesValue" value="azure/login@v1.1" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>